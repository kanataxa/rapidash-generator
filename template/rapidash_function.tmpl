package {{ .Package }}
{{ range $index, $struct := .Structs }}
func (e *{{ $struct.Name }}) Struct() *rapidash.Struct {
    return rapidash.NewStruct("{{ $struct.TableName }}").
    {{- range $index, $field := $struct.Fields }}
        {{- if ne $index 0 }}.{{ end }}
        {{ $field.FieldFunc }}({{ $field.DBName }})
    {{- end }}
}
func (e *{{ $struct.Name }}) EncodeRapidash(enc rapidash.Encoder) error {
    {{- range $index, $field := $struct.Fields }}
        {{- if eq $field.DBName "id" }}
            if e.{{ $field.Name }} != 0 {
                enc.{{ $field.EncodeFunc }}({{ $field.DBName }}, {{- if $field.UnwrapType -}} {{ $field.UnwrapType }}(e.{{ $field.Name }}){{- else -}}e.{{ $field.Name }}{{- end -}})
            }
        {{- else }}
            enc.{{ $field.EncodeFunc }}({{ $field.DBName }}, {{- if $field.UnwrapType -}} {{ $field.UnwrapType }}(e.{{ $field.Name }}){{- else -}}e.{{ $field.Name }}{{- end -}})
        {{- end }}
    {{- end }}
    if err := enc.Error(); err != nil {
        return xerrors.Errorf("failed to encode rapidash: %w", err)
    }
    return nil
}
func (e *{{ $struct.Name }}) DecodeRapidash(dec rapidash.Decoder) error {
    {{- range $index, $field := $struct.Fields }}
        e.{{ $field.Name }} =  {{- if $field.WrapType -}}{{ $field.WrapType }}(dec.{{ $field.DecodeFunc }}({{ $field.DBName }})){{- else -}} dec.{{ $field.DecodeFunc }}({{ $field.DBName }}){{- end -}}
    {{- end }}
    if err := dec.Error(); err != nil {
        return xerrors.Errorf("failed to decode rapidash: %w", err)
    }
    return nil
}
{{ end }}
